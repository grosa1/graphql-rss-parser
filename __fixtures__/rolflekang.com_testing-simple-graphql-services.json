{
  "data": "<!DOCTYPE html><html><head><meta charSet=\"utf-8\"/><meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/><meta http-equiv=\"Content-Security-Policy-Report-Only\" content=\"base-uri &#x27;self&#x27;; default-src &#x27;self&#x27;; script-src &#x27;unsafe-inline&#x27; &#x27;self&#x27; &#x27;sha256-U13iXYGneYIHXejezq30aOxNI4rxZqq9bjrEXQrt/UQ=&#x27; &#x27;sha256-NGLjWiICHrdgcCkflIdoFVllTkQWbKtPeGsioRkKHWM=&#x27; &#x27;sha256-M+XJXhCjRdlWmg+rv0kh6hEDuzFOnC2H+NE9629mEPE=&#x27; &#x27;sha256-WSANZsdAplhLHU9nmUsusgYPqfzUin6AMSN1+Su3Roc=&#x27;; style-src https://fonts.googleapis.com &#x27;unsafe-inline&#x27; data: blob: &#x27;self&#x27; &#x27;sha256-eJadPW3Vogxac/gwmnW9AotDSOKYBW3V6GWPnkZOsX8=&#x27; &#x27;sha256-wryHLJokEzjVuwbunkTWD1YxcJu4B0YXjqflcDOfv74=&#x27;; object-src &#x27;none&#x27;; form-action &#x27;self&#x27;; font-src https://fonts.gstatic.com &#x27;self&#x27;; connect-src https://services.rolflekang.com &#x27;self&#x27;; img-src &#x27;self&#x27; data:;\"/><script src=\"/cdn-cgi/apps/head/UfjZ8HAT0I7Fsvqp0rf-S7u-dA8.js\"></script><style data-href=\"/styles.7484432e61a90eced781.css\">code,code[class*=language-],pre[class*=language-]{color:#333;text-align:left;white-space:pre;word-spacing:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;font-family:Consolas,Liberation Mono,Menlo,Courier,monospace;line-height:1.4;direction:ltr;cursor:text}pre[class*=language-]{overflow:auto;margin:1em 0;padding:1.2em;border-radius:3px;font-size:85%}li code,p code,table code{margin:0;border-radius:3px;padding:.2em 0;font-size:85%}li code:after,li code:before,p code:after,p code:before,table code:after,table code:before{letter-spacing:-.2em;content:\"\\A0\"}:not(pre)>code[class*=language-],code,pre[class*=language-]{background:#f7f7f7}:not(pre)>code[class*=language-]{padding:.1em;border-radius:.3em}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#969896}.token.atrule,.token.attr-value,.token.punctuation,.token.string{color:#183691}.token.property,.token.tag{color:#63a35c}.token.boolean,.token.number{color:#0086b3}.token.attr-name,.token.attr-value .punctuation:first-child,.token.important,.token.keyword,.token.regex,.token.selector{color:#795da3}.language-css .token.string,.token.entity,.token.operator,.token.url{color:#a71d5d}.token.entity{cursor:help}.namespace{opacity:.7}.gatsby-highlight-code-line{background-color:rgba(42,19,51,.18);display:block;margin-right:-1.2em;margin-left:-1.2em;padding-right:1em;padding-left:.75em;border-left:.25em solid #6c3082}</style><meta name=\"generator\" content=\"Gatsby 2.20.15\"/><script>window.__EMOTION_CRITICAL_CSS_IDS__ = [\"p8hnmp\",\"115c02v\",\"123mqzb\",\"13hzeyi\",\"1rf0qy1\",\"1xnocc7\",\"pw6htw\",\"wnh5wy\"];</script><style>.css-p8hnmp{display:block;margin-top:2rem;margin-left:auto;margin-right:auto;font-size:8rem;text-align:center;color:#6C3082;border-bottom:10px solid #6C3082;-webkit-transition:margin 1s,font-size 1s;transition:margin 1s,font-size 1s;}@media print{.css-p8hnmp{display:none;}}.css-115c02v{-webkit-text-decoration:none;text-decoration:none;color:#6C3082;}.css-115c02v:hover{color:#6C3082;}.css-115c02v:active{color:#6C3082;}body{margin:0px;padding:0px;font-size:16px;font-weight:300;font-family:Merriweather,Georgia,serif;}@media (min-width:600px){body{font-size:20px;}}@media print{body{font-size:12pt;}}a{color:#6C3082;}a:active{color:#000000;}main img{margin:1rem auto;}.css-1xnocc7{line-height:1.7em;max-width:750px;width:90%;margin:3rem auto;}.css-pw6htw{margin-top:4rem;}.css-pw6htw header{font-size:1.8rem;border-bottom:3px solid #6c3082;}.css-pw6htw ul{margin-top:0.2rem;margin-left:0.2rem;}.css-pw6htw em{font-size:0.9rem;}.css-wnh5wy h1{font-size:1.95rem;margin-bottom:0em;}</style><title data-react-helmet=\"true\">Testing simple GraphQL services</title><meta data-react-helmet=\"true\" content=\"Testing simple GraphQL services\" property=\"og:title\"/><meta data-react-helmet=\"true\" content=\"Testing simple GraphQL services\" name=\"twitter:title\"/><meta data-react-helmet=\"true\" content=\"summary_large_image\" name=\"twitter:card\"/><meta data-react-helmet=\"true\" content=\"@relekang\" name=\"twitter:author\"/><meta data-react-helmet=\"true\" content=\"https://master--rlcom.netlify.app/testing-simple-graphql-services-link-card.png\" property=\"og:image\"/><meta data-react-helmet=\"true\" content=\"https://master--rlcom.netlify.app/testing-simple-graphql-services-link-card.png\" name=\"twitter:image:src\"/><link rel=\"sitemap\" type=\"application/xml\" href=\"/sitemap.xml\"/><link rel=\"alternate\" type=\"application/rss+xml\" title=\"Writing by Rolf Erik Lekang\" href=\"/feed.xml\"/><link rel=\"preconnect dns-prefetch\" href=\"https://www.google-analytics.com\"/><link href=\"https://fonts.googleapis.com/css?family=Merriweather:300,400,700\" rel=\"stylesheet\"/><link as=\"script\" rel=\"preload\" href=\"/webpack-runtime-39fb5931f0727d9fd7ee.js\"/><link as=\"script\" rel=\"preload\" href=\"/framework-f43a7322fe4573f77698.js\"/><link as=\"script\" rel=\"preload\" href=\"/styles-c076416a2b080c6c3803.js\"/><link as=\"script\" rel=\"preload\" href=\"/app-09d8a480975ea02b6751.js\"/><link as=\"script\" rel=\"preload\" href=\"/65b8b1e454527ca75665bdf87cc9e3f1a0b03774-b3a1143d4a048fe25ebe.js\"/><link as=\"script\" rel=\"preload\" href=\"/component---src-templates-post-wrapper-tsx-17c6834067c56f37b8ae.js\"/><link as=\"fetch\" rel=\"preload\" href=\"/page-data/testing-simple-graphql-services/page-data.json\" crossorigin=\"anonymous\"/><link as=\"fetch\" rel=\"preload\" href=\"/page-data/app-data.json\" crossorigin=\"anonymous\"/></head><body><div id=\"___gatsby\"><div style=\"outline:none\" tabindex=\"-1\" id=\"gatsby-focus-wrapper\"><header class=\"css-p8hnmp \" title=\"Rolf Erik Lekang\"><a class=\"css-115c02v\" href=\"/\">RL</a></header><section class=\"css-1xnocc7\"><main class=\"css-wnh5wy\"><h1>Testing simple GraphQL services</h1><div class=\"meta\">28.05.2017</div><div><p>I recently created a <a href=\"https://github.com/relekang/micro-rss-parser\">GraphQL based microservice</a> for parsing RSS-feeds. I wanted\nto write something down about the approach I took to test the API. The service is read only, as\nthere is little we can push out into others RSS feeds.</p>\n<p>GraphQL returns 200 status for almost everything. Whenever error occurs it only pushes the error\nto a list of errors that is passed to the payload. This is because it is designed to be resillient\nand give as much information as it can even when something fails. This also means that we can\nabstract away the most part of successful and unsuccessful requests in our tests and still get\nvalid tests. Thus, when testing the API layer of this service the only thing that matters is the\nquery and the response.</p>\n<p>Services like micro-rss-parser has another characteristic that makes them easy to test. No\nauthentication or authorization, which means that we do not need to check different types of errors\nbased on different states of authorization. Thus, it is only the GraphQL query and the response\nthat matters.</p>\n<p>I created a helper that allowed me to write tests in an easy way with focus on the queries. The\ntests look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">testGraphQlService<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{\n  feed(url=\"https://rolflekang.com/feed.xml\") {\n    entries {\n      title\n    }\n  }\n}\n </span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Under the hood that helper creates a <a href=\"https://facebook.github.io/jest/\">jest</a> test that asserts to a snapshot with jests handy\n<a href=\"https://facebook.github.io/jest/docs/expect.html#tomatchsnapshotoptionalstring\">toMatchSnapshot()</a>. This generates a snapshot file for every test file with a map of responses\nwith the query as key. Thus, reviewing these tests and test changes is a bliss. Below is the\nimplementation of the test helper as it was in micro-rss-parser at the time when this was written.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'superagent'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createTestServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n   * Set up a test instance and return url.\n   * For micro-rss-parser I used this https://github.com/zeit/micro#testing\n   */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">testGraphqlApi</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> response\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createTestServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> request\n        <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'graphql-test'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>body\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> error\n      <span class=\"token punctuation\">}</span>\n\n      response <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>body\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It has made it easy to write good and readable API tests of the little microservice. However,\nkeep in mind that this is a sufficient solution due to the assumptions discussed earlier so it\nmight not be a fit approach for you project, nevertheless, feel free to take the helper. Let me\nknow how it works out for you ✌️</p></div></main><div class=\"css-pw6htw\" id=\"related-articles\"><header>Related articles</header><ul><li><a href=\"/rmoq\">rmoq - a request mock cache</a> <em>30.12.2014</em></li><li><a href=\"/twitter-cards-for-gatsby-posts\">Twitter cards for Gatsby posts</a> <em>26.02.2019</em></li><li><a href=\"/related-articles-with-gatsby\">Related articles with Gatsby</a> <em>20.02.2019</em></li><li><a href=\"/serving-plain-text-with-nextjs\">Serving text/plain for curl with Next</a> <em>26.05.2020</em></li></ul></div></section></div><div id=\"gatsby-announcer\" style=\"position:absolute;top:0;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0\" aria-live=\"assertive\" aria-atomic=\"true\"></div></div><script>\n  \n  function gaOptout(){document.cookie=disableStr+'=true; expires=Thu, 31 Dec 2099 23:59:59 UTC;path=/',window[disableStr]=!0}var gaProperty='UA-7442952-7',disableStr='ga-disable-'+gaProperty;document.cookie.indexOf(disableStr+'=true')>-1&&(window[disableStr]=!0);\n  if(true) {\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n  }\n  if (typeof ga === \"function\") {\n    ga('create', 'UA-7442952-7', 'auto', {});\n      ga('set', 'anonymizeIp', true);\n      \n      \n      \n      \n      }</script><script id=\"gatsby-script-loader\">/*<![CDATA[*/window.pagePath=\"/testing-simple-graphql-services\";/*]]>*/</script><script id=\"gatsby-chunk-mapping\">/*<![CDATA[*/window.___chunkMapping={\"app\":[\"/app-09d8a480975ea02b6751.js\"],\"component---src-templates-post-wrapper-tsx\":[\"/component---src-templates-post-wrapper-tsx-17c6834067c56f37b8ae.js\"],\"component---src-pages-404-js\":[\"/component---src-pages-404-js-08222e7236ff45de0fcc.js\"],\"component---src-pages-cv-tsx\":[\"/component---src-pages-cv-tsx-17835446bcc6798fac69.js\"],\"component---src-pages-hire-re\":[\"/component---src-pages-hire-re-53dc161b7034e09a20da.js\"],\"component---src-pages-index-re\":[\"/component---src-pages-index-re-b1da87d7c1ccced723a0.js\"],\"component---src-pages-not-found-re\":[\"/component---src-pages-not-found-re-efb70c2a88a235eeb101.js\"],\"component---src-pages-photography-re\":[\"/component---src-pages-photography-re-8c4213d29cc805b2472d.js\"],\"component---src-pages-writing-tsx\":[\"/component---src-pages-writing-tsx-846d21092f73be271e3b.js\"]};/*]]>*/</script><script src=\"/component---src-templates-post-wrapper-tsx-17c6834067c56f37b8ae.js\" async=\"\"></script><script src=\"/65b8b1e454527ca75665bdf87cc9e3f1a0b03774-b3a1143d4a048fe25ebe.js\" async=\"\"></script><script src=\"/app-09d8a480975ea02b6751.js\" async=\"\"></script><script src=\"/styles-c076416a2b080c6c3803.js\" async=\"\"></script><script src=\"/framework-f43a7322fe4573f77698.js\" async=\"\"></script><script src=\"/webpack-runtime-39fb5931f0727d9fd7ee.js\" async=\"\"></script></body></html>",
  "status": 200,
  "headers": {
    "date": "Tue, 29 Sep 2020 13:37:55 GMT",
    "content-type": "text/html; charset=UTF-8",
    "transfer-encoding": "chunked",
    "connection": "close",
    "set-cookie": [
      "__cfduid=dc6e7761bc51211fa13ce35b8b5b324041601386674; expires=Thu, 29-Oct-20 13:37:54 GMT; path=/; domain=.rolflekang.com; HttpOnly; SameSite=Lax"
    ],
    "cache-control": "public, max-age=0, must-revalidate",
    "referrer-policy": "no-referrer-when-downgrade",
    "strict-transport-security": "max-age=31536000; includeSubDomains",
    "x-content-type-options": "nosniff",
    "x-frame-options": "DENY",
    "x-xss-protection": "1; mode=block",
    "age": "0",
    "vary": "Accept-Encoding",
    "x-nf-request-id": "a0d042ad-8a0f-40fc-9103-3e6446ac3fe9-19555502",
    "cf-cache-status": "DYNAMIC",
    "cf-request-id": "057bae919e000015ec11950200000001",
    "expect-ct": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\"",
    "server": "cloudflare",
    "cf-ray": "5da619fc3df315ec-ARN"
  }
}